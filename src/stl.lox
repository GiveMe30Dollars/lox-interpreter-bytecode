class Exception {
    init(payload){
        this.payload = payload;
    }
    toString(){
        return String(this.payload);
    }
}

class Slice {
    init(start, stop, step){
        this.start = start;
        this.stop = stop;
        this.step = step;
    }
}

class Array {
    init(arg){
        if (arg == nil){
            this = Array._raw();
        }
        else if (type(arg) == Number){
            this = Array._allocate(arg);
        }
        else throw Exception("Not implemented!");
    }
    get(idx){
        return this._get(idx);
    }
    set(idx, value){
        this._set(idx, value);
        return value;
    }

    toString(){
        var str = "[";
        for (var i = 0; i < this.length(); i += 1){
            str = "${str}${(i == 0) ? "" : ", "}${this[i]}";
        }
        str += "]";
        return str;
    }

    map(fn){
        if (type(fn) != Function)
            throw Exception("Argument must be a function.");
        if (fn.arity() != 1)
            throw Exception("Function must take in exactly one argument.");

        var length = this.length();
        var result = Array._allocate(length);
        for (var i = 0; i < length; i += 1){
            result[i] = fn(this[i]);
        }
        return result;
    }
    copy(){
        return this.map(fun (n){n});
    }

    filter(fn){
        if (type(fn) != Function)
            throw Exception("Argument must be a function.");
        if (fn.arity() != 1)
            throw Exception("Function must take in exactly one argument.");
        
        var result = Array(nil);
        for (var i = 0; i < this.length(); i += 1){
            if (fn(this[i]))
                result.append(this[i]);
        }
        return result;
    }

    reduce(fn){
        if (type(fn) != Function)
            throw Exception("Argument must be a function.");
        if (fn.arity() != 2)
            throw Exception("Function must take in exactly two arguments.");
        if (this.length() < 1)
            throw Exception("Array must have a minimum length of 2.");
        
        var temp = this[0];
        for (var i = 1; i < this.length(); i += 1){
            temp = fn(temp, this[i]);
        }
        return temp;
    }
}
// This is a test for anonymous functions, 
// and how they interact with the closure system

fun makeMultiplier(n){
    return fun (m) { m * n };
}
var doubler = makeMultiplier(2);
print doubler;                  // Expect: <fn [xxxxxxxx]>
print doubler(5);               // Expect: 10

for (var i = 1; i <= 5; i += 1){
    var temp = fun (m) {i * m};
    print temp;
    print temp(i);
}
// Expect: <fn [xxxxxxxx]> five times
// Expect: 1, 4, 9, 16, 25


(fun(){ print "Self-invoked!"; })();
// Expect: Self-invoked!

// Full anonymous function
var anon = fun(n) {
    for (var i = 1; i <= n; i += 1){
        var subscript = "th";
        for (var j = i; j > 0; j -= 10){
            if (j == 1) subscript = "st";
            if (j == 2) subscript = "nd";
        }
        print "${i}${subscript} iteration of loop.";
    }
    return n;
};
anon(5);